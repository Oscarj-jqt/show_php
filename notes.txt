Exercice 3

On veut un site de spectacle

Les cas d'utilisation sont les suivants : 
- Page d'accueil -> publique (message d'accueil avec menu de navigation)
- Page liste les spectacles -> publique 
- Page fiche spectacle -> publique 
- R√©server une place -> utilisateurs identifi√©s (inscrits sur le site)
- Acc√©der √† une page de profil -> liste des billets que j'ai r√©serv√© 
-> utilisateurs identifi√©s 
- Ajouter des spectacles -> administrateurs du site (mettre de l'information et la tester)

Donn√©es : on peut faire un fichier .json avec quelques donn√©es
"publique" donc acc√®s conditionn√© en fonction des r√¥les 


## Contraintes
- Impl√©menter un router avec liste des pages
- Controllers -> m√©thodes qui r√©solvent chaque cas d'utilisation
-> En option : impl√©menter le middleware sous forme d'attribut PHP
- Filtrer les acc√®s en fonction des contraintes particuli√®res des cas d'utilisation
- Faire un application php "normalis√©es"
-> classes
-> des espaces de nom
- refresh token (jeton de raffra√Æchissement) √† partir d'une autre route pour reg√©n√©rer
le jeton (dur√©e de vie courte) donc g√©n√©ration de 2 tokens (jetons d'acc√®s et de raffra√Æchissement)


readme 
contributeurs, objectif


firebase/php-jwt ‚Üí gestion JWT
vlucas/phpdotenv ‚Üí gestion de la cl√© secr√®te (bonne pratique)

üß≠ √âtapes √† venir (chronologie logique)
1. Donn√©es de d√©part
Cr√©er les fichiers .json dans /src/Data‚ÄØ:
shows.json
users.json
reservations.json
Ces fichiers servent de ‚Äúbase‚Äù pour les repositories (impl√©mentation infra).
2. Impl√©mentations concr√®tes des repositories
Cr√©er les classes qui lisent/√©crivent les fichiers JSON pour chaque entit√©.
Respecter l‚Äôinterface de repository.
3. Use Cases (services m√©tier)
Impl√©menter les r√®gles m√©tier‚ÄØ: r√©server, lister, ajouter, etc.
Ces services utilisent les repositories abstraits.
4. Controllers
Une classe par cas d‚Äôutilisation, chaque m√©thode = une action
Les controllers re√ßoivent les requ√™tes, appellent les use cases
5. Router
Un routeur central qui oriente chaque route vers le bon controller/m√©thode.
6. Middleware
Auth‚ÄØ: v√©rifie le JWT (acc√®s r√©serv√©)
Role‚ÄØ: filtre selon le r√¥le (admin/user)
7. JWT & Refresh Token
Service pour g√©n√©rer, v√©rifier, rafra√Æchir les jetons
8. Tests unitaires
Sur mod√®les, use cases, controleurs critiques
9. S√©curit√©
Hashage des mots de passe (password_hash)
Validation des entr√©es
Cookies s√©curis√©s
